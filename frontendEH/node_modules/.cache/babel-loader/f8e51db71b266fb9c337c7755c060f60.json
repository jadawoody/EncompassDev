{"ast":null,"code":"import axios from 'axios';\nimport baseURL from './config.js'; // import {NotificationContainer, NotificationManager} from 'react-notifications';\n\nconsole.log(baseURL);\nconst token = window.localStorage.getItem('token');\nlet t = token ? token.substring(0, 15) : null;\nconsole.log('TOKEN', t, 'NODE_ENV', process.env.NODE_ENV);\n\nlet resetHead = () => {\n  return {\n    headers: {\n      Authorization: `Bearer ${window.localStorage.getItem('token')}`\n    }\n  };\n};\n\nconst API = axios.create({\n  withCredentials: true,\n  baseURL,\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n});\nconst actions = {// getUser: async () => {\n  //   return await API.get(`/user`, resetHead())\n  // },\n  // signUp: async (user) => {\n  //   let res = await API.post('/signup', user, resetHead())\n  //   window.localStorage.setItem('token', res?.data?.token)\n  //   return res\n  // },\n  // logIn: async (user) => {\n  //   let res = await API.post('/login', user, resetHead())\n  //   window.localStorage.setItem('token', res?.data?.token)\n  //   return res\n  // },\n  // logOut: async () => {\n  //   window.localStorage.removeItem('token')\n  //   return await API.get('/logout', resetHead())\n  // }\n}; // API.interceptors.response.use((response) => response, (error) => { \n//   console.error(error?.response?.data)\n//   if(error?.response?.data.name !== \"JsonWebTokenError\" )\n//     NotificationManager.error(String(error?.response?.data.message))\n//   else\n//     NotificationManager.error(\"Please signup or login\")\n// })\n\nexport default actions;","map":{"version":3,"sources":["/Users/JadaWoody/Documents/EHDevSite/IronPlate/frontend/src/api/index.js"],"names":["axios","baseURL","console","log","token","window","localStorage","getItem","t","substring","process","env","NODE_ENV","resetHead","headers","Authorization","API","create","withCredentials","actions"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,aAApB,C,CACA;;AAGAC,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,MAAMG,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAd;AACA,IAAIC,CAAC,GAAGJ,KAAK,GAAGA,KAAK,CAACK,SAAN,CAAgB,CAAhB,EAAkB,EAAlB,CAAH,GAAyB,IAAtC;AAEAP,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBK,CAApB,EAAuB,UAAvB,EAAkCE,OAAO,CAACC,GAAR,CAAYC,QAA9C;;AAGA,IAAIC,SAAS,GAAG,MAAO;AACrB,SAAO;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAG,UAASV,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAqC;AAAhE;AAAX,GAAP;AACD,CAFD;;AAIA,MAAMS,GAAG,GAAGhB,KAAK,CAACiB,MAAN,CAAa;AAAEC,EAAAA,eAAe,EAAE,IAAnB;AAAyBjB,EAAAA,OAAzB;AAAoCa,EAAAA,OAAO,EAAE;AAAEC,IAAAA,aAAa,EAAG,UAASX,KAAM;AAAjC;AAA7C,CAAb,CAAZ;AAGA,MAAMe,OAAO,GAAG,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAjBe,CAAhB,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,eAAeA,OAAf","sourcesContent":["import axios from 'axios';\nimport baseURL from './config.js'\n// import {NotificationContainer, NotificationManager} from 'react-notifications';\n\n\nconsole.log(baseURL)\n\nconst token = window.localStorage.getItem('token')\nlet t = token ? token.substring(0,15):null\n\nconsole.log('TOKEN',t, 'NODE_ENV',process.env.NODE_ENV)\n\n\nlet resetHead = () =>  {  \n  return { headers: { Authorization: `Bearer ${window.localStorage.getItem('token')}` } }\n}\n\nconst API = axios.create({ withCredentials: true, baseURL ,  headers: { Authorization: `Bearer ${token}`} } );\n\n\nconst actions = {\n  // getUser: async () => {\n  //   return await API.get(`/user`, resetHead())\n  // },\n  // signUp: async (user) => {\n  //   let res = await API.post('/signup', user, resetHead())\n  //   window.localStorage.setItem('token', res?.data?.token)\n  //   return res\n  // },\n  // logIn: async (user) => {\n  //   let res = await API.post('/login', user, resetHead())\n  //   window.localStorage.setItem('token', res?.data?.token)\n  //   return res\n  // },\n  // logOut: async () => {\n  //   window.localStorage.removeItem('token')\n  //   return await API.get('/logout', resetHead())\n // }\n};\n\n// API.interceptors.response.use((response) => response, (error) => { \n//   console.error(error?.response?.data)\n//   if(error?.response?.data.name !== \"JsonWebTokenError\" )\n//     NotificationManager.error(String(error?.response?.data.message))\n//   else\n//     NotificationManager.error(\"Please signup or login\")\n\n// })\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}